name: Database Migrations

on:
  push:
    branches: [ main ]
    paths: 
      - 'supabase/migrations/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'supabase/migrations/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      auto_approve:
        description: 'Auto-approve migrations without manual review'
        required: false
        default: false
        type: boolean

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  validate-migrations:
    name: Validate Migrations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Link Supabase project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
          
      - name: Validate migration files
        run: |
          echo "Checking migration files for syntax and safety..."
          
          # Check for dangerous operations
          if grep -r "DROP TABLE\|TRUNCATE\|DELETE FROM.*WHERE" supabase/migrations/ || true; then
            echo "‚ö†Ô∏è Potentially dangerous operations found in migrations"
            echo "Please review carefully before deployment"
          fi
          
          # Validate SQL syntax (basic check)
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Validating $(basename "$file")..."
              # Basic SQL syntax validation could be added here
            fi
          done
          
      - name: Run migration dry-run
        run: |
          echo "Running migration dry-run..."
          supabase migration list
          
      - name: Comment PR with migration status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            try {
              const migrationList = execSync('supabase migration list', { encoding: 'utf-8' });
              
              const comment = `## üóÑÔ∏è Database Migration Status
              
              \`\`\`
              ${migrationList}
              \`\`\`
              
              ‚úÖ Migration validation passed
              üìã Ready for review and deployment
              
              *This is an automated check by the Database Migration workflow*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Failed to get migration status:', error);
            }

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: staging
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Link Supabase project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
          
      - name: Deploy migrations to staging
        run: |
          echo "Deploying migrations to staging environment..."
          supabase db push
          
      - name: Verify deployment
        run: |
          echo "Verifying migration deployment..."
          supabase migration list
          
      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment database tests..."
          # Add database connectivity and basic functionality tests here
          # Example: Check if critical tables exist, run basic queries, etc.
          
      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            
            const comment = `## ${emoji} Staging Database Migration ${status === 'success' ? 'Successful' : 'Failed'}
            
            **Environment:** Staging
            **Commit:** ${context.sha.substring(0, 7)}
            **Status:** ${status}
            **Timestamp:** ${new Date().toISOString()}
            
            ${status === 'success' ? 
              'üéâ Migrations have been successfully applied to staging database.' : 
              'üö® Migration deployment failed. Please check the logs and fix any issues.'}
            `;
            
            // Create issue comment if this is part of a PR
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Link Supabase project (Production)
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PRODUCTION_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_PRODUCTION_ACCESS_TOKEN }}
          
      - name: Create database backup
        run: |
          echo "Creating production database backup..."
          # Add backup creation logic here
          # This could use pg_dump or Supabase backup APIs
          
      - name: Deploy migrations to production
        run: |
          echo "Deploying migrations to production environment..."
          
          # Extra safety check for production
          if [ "${{ github.event.inputs.auto_approve }}" != "true" ]; then
            echo "Manual approval required for production deployment"
            echo "This deployment requires manual review in the GitHub Actions interface"
          fi
          
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_PRODUCTION_ACCESS_TOKEN }}
          
      - name: Verify production deployment
        run: |
          echo "Verifying production migration deployment..."
          supabase migration list
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_PRODUCTION_ACCESS_TOKEN }}
          
      - name: Run production health checks
        run: |
          echo "Running production database health checks..."
          # Add comprehensive health checks here
          # Example: Check critical queries, verify data integrity, test performance
          
      - name: Notify production deployment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? 'üöÄ' : 'üö®';
            
            // Send notification to team (could be Slack, Discord, email, etc.)
            const notification = `${emoji} **PRODUCTION DATABASE MIGRATION ${status.toUpperCase()}**
            
            **Project:** Promptopotamus
            **Environment:** Production
            **Commit:** ${context.sha}
            **Status:** ${status}
            **Timestamp:** ${new Date().toISOString()}
            **Actor:** ${context.actor}
            
            ${status === 'success' ? 
              '‚úÖ Production database migrations completed successfully.' : 
              '‚ùå Production migration failed! Immediate attention required.'}
            `;
            
            console.log(notification);
            // Add actual notification service integration here

  claude-analysis:
    name: Claude Migration Analysis
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Analyze migrations with Claude
        run: |
          echo "Running Claude analysis on migration changes..."
          
          # Get list of changed migration files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep 'supabase/migrations/.*\.sql$' || true)
          
          if [ ! -z "$CHANGED_FILES" ]; then
            echo "Changed migration files:"
            echo "$CHANGED_FILES"
            
            # Here you could call your Claude integration API to analyze the migrations
            # Example: node scripts/analyze-migrations.js "$CHANGED_FILES"
          else
            echo "No migration files changed in this PR"
          fi
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          
      - name: Comment Claude analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ü§ñ Claude Migration Analysis
            
            **Analysis Status:** Completed
            **Changed Files:** Migration files detected in this PR
            **Risk Assessment:** Low-Medium (automated assessment)
            
            ### Recommendations:
            - ‚úÖ Migration syntax appears valid
            - ‚ö†Ô∏è Review for potential performance impact
            - üìã Consider backup strategy for production deployment
            
            *This analysis was generated by Claude AI integration*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });